name: Build Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            executable_name: YouTube-MP3-Downloader.exe
            artifact_name: youtube-mp3-downloader-windows
          - os: macos-latest
            executable_name: YouTube-MP3-Downloader
            artifact_name: youtube-mp3-downloader-macos
          - os: ubuntu-latest
            executable_name: YouTube-MP3-Downloader
            artifact_name: youtube-mp3-downloader-linux

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install FFmpeg (Windows)
      if: runner.os == 'Windows'
      run: |
        # FFmpeg를 직접 다운로드하여 설치
        Invoke-WebRequest -Uri "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip" -OutFile "ffmpeg.zip"
        Expand-Archive ffmpeg.zip -DestinationPath .
        $ffmpegPath = Get-ChildItem -Path . -Filter "ffmpeg-*" -Directory | Select-Object -First 1
        Add-Content $env:GITHUB_PATH "$($ffmpegPath.FullName)\bin"

    - name: Install FFmpeg (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ffmpeg

    - name: Install FFmpeg (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y ffmpeg

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --console --name "YouTube-MP3-Downloader" --add-data "README.md;." --hidden-import "yt_dlp" --hidden-import "colorama" --hidden-import "ffmpeg" --clean youtube_downloader.py

    - name: Build executable (Unix)
      if: runner.os != 'Windows'
      run: |
        if [ "$RUNNER_OS" == "macOS" ]; then
          # macOS 특별 옵션: 보안 이슈 완화
          pyinstaller --onefile --console --name "YouTube-MP3-Downloader" \
            --add-data "README.md:." \
            --hidden-import "yt_dlp" \
            --hidden-import "colorama" \
            --hidden-import "ffmpeg" \
            --osx-bundle-identifier "com.cursor.youtube-mp3-downloader" \
            --clean \
            youtube_downloader.py
        else
          # Linux 빌드
          pyinstaller --onefile --console --name "YouTube-MP3-Downloader" --add-data "README.md:." --hidden-import "yt_dlp" --hidden-import "colorama" --hidden-import "ffmpeg" --clean youtube_downloader.py
        fi

    - name: Set executable permissions (macOS/Linux)
      if: runner.os != 'Windows'
      run: |
        chmod +x dist/YouTube-MP3-Downloader
        ls -la dist/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.executable_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: find artifacts -type f
    
    - name: Prepare release files
      run: |
        mkdir -p release_files
        # Windows
        if [ -f "artifacts/youtube-mp3-downloader-windows/YouTube-MP3-Downloader.exe" ]; then
          cp "artifacts/youtube-mp3-downloader-windows/YouTube-MP3-Downloader.exe" "release_files/"
          echo "✅ Windows exe found"
        else
          echo "❌ Windows exe not found"
        fi
        
        # macOS
        if [ -f "artifacts/youtube-mp3-downloader-macos/YouTube-MP3-Downloader" ]; then
          cp "artifacts/youtube-mp3-downloader-macos/YouTube-MP3-Downloader" "release_files/YouTube-MP3-Downloader-macos"
          echo "✅ macOS binary found"
        else
          echo "❌ macOS binary not found"
        fi
        
        # Linux
        if [ -f "artifacts/youtube-mp3-downloader-linux/YouTube-MP3-Downloader" ]; then
          cp "artifacts/youtube-mp3-downloader-linux/YouTube-MP3-Downloader" "release_files/YouTube-MP3-Downloader-linux"
          echo "✅ Linux binary found"
        else
          echo "❌ Linux binary not found"
        fi
        
        echo "Final release files:"
        ls -la release_files/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release_files/*
        body: |
          ## 🎵 YouTube MP3 다운로더 Release
          
          ### 📦 다운로드
          - **Windows**: `YouTube-MP3-Downloader.exe`
          - **macOS**: `YouTube-MP3-Downloader` (Intel/Apple Silicon 모두 지원)
          - **Linux**: `YouTube-MP3-Downloader`
          
          ### ⚠️ 사전 요구사항
          - **FFmpeg 설치 필요**:
            - Windows: `winget install FFmpeg`
            - macOS: `brew install ffmpeg`
            - Ubuntu: `sudo apt install ffmpeg`
          
          ### 🚀 사용법
          1. 해당 OS용 실행 파일 다운로드
          2. FFmpeg 설치
          3. 실행 파일을 더블클릭하거나 터미널에서 실행
          
          Cursor AI와 Claude Sonnet 4로 제작된 고성능 다운로더입니다! 🤖✨
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 